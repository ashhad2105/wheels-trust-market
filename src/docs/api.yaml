openapi: 3.0.0
info:
  title: WheelsTrust API
  description: API documentation for the WheelsTrust platform
  version: 1.0.0
  contact:
    name: WheelsTrust Support
    email: support@wheelstrust.com

servers:
  - url: https://api.wheelstrust.com/v1
    description: Production server
  - url: http://localhost:5000/api/v1
    description: Development server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: object
          properties:
            code:
              type: string
              example: VALIDATION_ERROR
            message:
              type: string
              example: Invalid input data
            details:
              type: string
              example: Name must be between 2 and 50 characters

    User:
      type: object
      properties:
        id:
          type: string
          example: 507f1f77bcf86cd799439011
        name:
          type: string
          example: John Doe
        email:
          type: string
          example: john@example.com
        role:
          type: string
          enum: [user, service_provider, admin]
          example: user
        status:
          type: string
          enum: [active, pending, inactive]
          example: active
        phone:
          type: string
          example: 1234567890
        address:
          type: object
          properties:
            street:
              type: string
              example: 123 Main St
            city:
              type: string
              example: San Francisco
            state:
              type: string
              example: CA
            zipCode:
              type: string
              example: 94105
        createdAt:
          type: string
          format: date-time
          example: 2023-05-01T12:00:00Z

    Car:
      type: object
      properties:
        id:
          type: string
          example: 507f1f77bcf86cd799439012
        title:
          type: string
          example: 2020 Honda Accord Sport
        year:
          type: string
          example: 2020
        make:
          type: string
          example: Honda
        model:
          type: string
          example: Accord Sport
        price:
          type: string
          example: 23800
        mileage:
          type: string
          example: 28000
        description:
          type: string
          example: One owner Honda Accord in pristine condition...
        condition:
          type: string
          enum: [Excellent, Good, Fair, Poor]
          example: Excellent
        location:
          type: string
          example: Oakland, CA
        status:
          type: string
          enum: [active, sold, pending, draft]
          example: active
        features:
          type: array
          items:
            type: string
          example: [Honda Sensing, Apple CarPlay, Heated seats]
        images:
          type: array
          items:
            type: string
          example: [https://example.com/image1.jpg, https://example.com/image2.jpg]
        seller:
          $ref: '#/components/schemas/User'
        createdAt:
          type: string
          format: date-time
          example: 2023-05-15T09:45:00Z
        updatedAt:
          type: string
          format: date-time
          example: 2023-05-20T14:20:00Z

    ServiceProvider:
      type: object
      properties:
        id:
          type: string
          example: 507f1f77bcf86cd799439013
        name:
          type: string
          example: AutoCare Express
        description:
          type: string
          example: Full-service auto repair shop specializing in domestic and foreign vehicles...
        specialties:
          type: array
          items:
            type: string
          example: [Oil Change, Brake Service, Tire Replacement]
        services:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                example: serv1
              name:
                type: string
                example: Oil Change
              description:
                type: string
                example: Full synthetic oil change with filter replacement
              price:
                type: number
                example: 49.99
        location:
          type: object
          properties:
            address:
              type: string
              example: 123 Auto Blvd
            city:
              type: string
              example: San Francisco
            state:
              type: string
              example: CA
            zipCode:
              type: string
              example: 94105
        hours:
          type: object
          properties:
            monday:
              type: string
              example: 8:00 AM - 6:00 PM
            tuesday:
              type: string
              example: 8:00 AM - 6:00 PM
            wednesday:
              type: string
              example: 8:00 AM - 6:00 PM
            thursday:
              type: string
              example: 8:00 AM - 6:00 PM
            friday:
              type: string
              example: 8:00 AM - 6:00 PM
            saturday:
              type: string
              example: 9:00 AM - 5:00 PM
            sunday:
              type: string
              example: Closed
        phone:
          type: string
          example: 555-123-4567
        email:
          type: string
          example: service@autocare.com
        website:
          type: string
          example: https://autocare-express.com
        verified:
          type: boolean
          example: true
        status:
          type: string
          enum: [active, inactive, suspended]
          example: active
        images:
          type: array
          items:
            type: string
          example: [https://example.com/image1.jpg, https://example.com/image2.jpg]
        createdAt:
          type: string
          format: date-time
          example: 2023-05-15T10:30:00Z

    Booking:
      type: object
      properties:
        id:
          type: string
          example: 507f1f77bcf86cd799439014
        serviceProvider:
          $ref: '#/components/schemas/ServiceProvider'
        service:
          type: object
          properties:
            id:
              type: string
              example: serv1
            name:
              type: string
              example: Oil Change
            price:
              type: number
              example: 49.99
        date:
          type: string
          format: date
          example: 2023-06-15
        time:
          type: string
          example: 10:00 AM
        status:
          type: string
          enum: [pending, confirmed, completed, cancelled]
          example: confirmed
        notes:
          type: string
          example: Please check the tire pressure as well
        createdAt:
          type: string
          format: date-time
          example: 2023-05-20T14:30:00Z

    Notification:
      type: object
      properties:
        id:
          type: string
          example: 507f1f77bcf86cd799439015
        title:
          type: string
          example: Booking Confirmed
        description:
          type: string
          example: Your service booking with AutoCare Express has been confirmed
        type:
          type: string
          enum: [booking, message, system]
          example: booking
        read:
          type: boolean
          example: false
        createdAt:
          type: string
          format: date-time
          example: 2023-05-21T09:20:00Z
        readAt:
          type: string
          format: date-time
          example: 2023-05-21T10:30:00Z

paths:
  /auth/register:
    post:
      summary: Register a new user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, email, password]
              properties:
                name:
                  type: string
                  minLength: 2
                  maxLength: 50
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 6
                role:
                  type: string
                  enum: [user, service_provider, admin]
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User registered successfully
                  data:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/login:
    post:
      summary: Login user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Login successful
                  data:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/logout:
    post:
      summary: Logout user
      tags: [Auth]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logged out successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Logged out successfully

  /cars:
    get:
      summary: Get all car listings
      tags: [Cars]
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 10
        - name: sort
          in: query
          schema:
            type: string
            enum: [price, year, mileage]
        - name: order
          in: query
          schema:
            type: string
            enum: [asc, desc]
        - name: minPrice
          in: query
          schema:
            type: number
        - name: maxPrice
          in: query
          schema:
            type: number
        - name: minYear
          in: query
          schema:
            type: integer
        - name: maxYear
          in: query
          schema:
            type: integer
        - name: make
          in: query
          schema:
            type: string
        - name: model
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            type: string
            enum: [active, sold, pending, draft]
      responses:
        '200':
          description: List of cars
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      cars:
                        type: array
                        items:
                          $ref: '#/components/schemas/Car'
                      pagination:
                        type: object
                        properties:
                          total:
                            type: integer
                            example: 200
                          pages:
                            type: integer
                            example: 20
                          currentPage:
                            type: integer
                            example: 1
                          limit:
                            type: integer
                            example: 10

    post:
      summary: Create a new car listing
      tags: [Cars]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [year, make, model, price, mileage, description, condition, location]
              properties:
                year:
                  type: string
                make:
                  type: string
                model:
                  type: string
                price:
                  type: string
                mileage:
                  type: string
                description:
                  type: string
                condition:
                  type: string
                  enum: [Excellent, Good, Fair, Poor]
                location:
                  type: string
                features:
                  type: array
                  items:
                    type: string
                images:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        '201':
          description: Car listing created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Car listing created successfully
                  data:
                    $ref: '#/components/schemas/Car'

  /cars/{id}:
    get:
      summary: Get a single car listing
      tags: [Cars]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Car details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Car'

    put:
      summary: Update a car listing
      tags: [Cars]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                price:
                  type: string
                description:
                  type: string
                status:
                  type: string
                  enum: [active, sold, pending, draft]
                images:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        '200':
          description: Car listing updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Car listing updated successfully
                  data:
                    $ref: '#/components/schemas/Car'

    delete:
      summary: Delete a car listing
      tags: [Cars]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Car listing deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Car listing deleted successfully

  /cars/{id}/status:
    patch:
      summary: Update car listing status
      tags: [Cars]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [status]
              properties:
                status:
                  type: string
                  enum: [active, sold, pending, draft]
      responses:
        '200':
          description: Car status updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Car listing status updated successfully
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                      title:
                        type: string
                      status:
                        type: string
                      updatedAt:
                        type: string
                        format: date-time

  /service-providers:
    get:
      summary: Get all service providers
      tags: [Service Providers]
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 10
        - name: location
          in: query
          schema:
            type: string
        - name: specialty
          in: query
          schema:
            type: string
        - name: verified
          in: query
          schema:
            type: boolean
        - name: rating
          in: query
          schema:
            type: number
            minimum: 0
            maximum: 5
      responses:
        '200':
          description: List of service providers
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      serviceProviders:
                        type: array
                        items:
                          $ref: '#/components/schemas/ServiceProvider'
                      pagination:
                        type: object
                        properties:
                          total:
                            type: integer
                            example: 50
                          pages:
                            type: integer
                            example: 5
                          currentPage:
                            type: integer
                            example: 1
                          limit:
                            type: integer
                            example: 10

    post:
      summary: Create a new service provider
      tags: [Service Providers]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [name, description, specialties, services, location, hours, phone, email]
              properties:
                name:
                  type: string
                description:
                  type: string
                specialties:
                  type: array
                  items:
                    type: string
                services:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                      description:
                        type: string
                      price:
                        type: number
                location:
                  type: object
                  properties:
                    address:
                      type: string
                    city:
                      type: string
                    state:
                      type: string
                    zipCode:
                      type: string
                hours:
                  type: object
                  properties:
                    monday:
                      type: string
                    tuesday:
                      type: string
                    wednesday:
                      type: string
                    thursday:
                      type: string
                    friday:
                      type: string
                    saturday:
                      type: string
                    sunday:
                      type: string
                phone:
                  type: string
                email:
                  type: string
                  format: email
                website:
                  type: string
                  format: uri
                images:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        '201':
          description: Service provider created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Service provider profile created successfully
                  data:
                    $ref: '#/components/schemas/ServiceProvider'

  /service-providers/{id}:
    get:
      summary: Get a single service provider
      tags: [Service Providers]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Service provider details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/ServiceProvider'

    put:
      summary: Update a service provider
      tags: [Service Providers]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                specialties:
                  type: array
                  items:
                    type: string
                services:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                      description:
                        type: string
                      price:
                        type: number
                location:
                  type: object
                  properties:
                    address:
                      type: string
                    city:
                      type: string
                    state:
                      type: string
                    zipCode:
                      type: string
                hours:
                  type: object
                  properties:
                    monday:
                      type: string
                    tuesday:
                      type: string
                    wednesday:
                      type: string
                    thursday:
                      type: string
                    friday:
                      type: string
                    saturday:
                      type: string
                    sunday:
                      type: string
                phone:
                  type: string
                email:
                  type: string
                  format: email
                website:
                  type: string
                  format: uri
                images:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        '200':
          description: Service provider updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Service provider updated successfully
                  data:
                    $ref: '#/components/schemas/ServiceProvider'

    delete:
      summary: Delete a service provider
      tags: [Service Providers]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Service provider deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Service provider deleted successfully

  /service-providers/{id}/status:
    patch:
      summary: Update service provider status
      tags: [Service Providers]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [status]
              properties:
                status:
                  type: string
                  enum: [active, inactive, suspended]
      responses:
        '200':
          description: Service provider status updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Service provider status updated successfully
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                      name:
                        type: string
                      status:
                        type: string

  /service-providers/{id}/verify:
    patch:
      summary: Update service provider verification status
      tags: [Service Providers]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [verified]
              properties:
                verified:
                  type: boolean
      responses:
        '200':
          description: Service provider verification status updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Service provider verification status updated
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                      name:
                        type: string
                      verified:
                        type: boolean

  /bookings:
    get:
      summary: Get all bookings
      tags: [Bookings]
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 10
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, confirmed, completed, cancelled]
      responses:
        '200':
          description: List of bookings
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      bookings:
                        type: array
                        items:
                          $ref: '#/components/schemas/Booking'
                      pagination:
                        type: object
                        properties:
                          total:
                            type: integer
                            example: 35
                          pages:
                            type: integer
                            example: 4
                          currentPage:
                            type: integer
                            example: 1
                          limit:
                            type: integer
                            example: 10

    post:
      summary: Create a new booking
      tags: [Bookings]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [serviceProviderId, serviceId, date, time]
              properties:
                serviceProviderId:
                  type: string
                serviceId:
                  type: string
                date:
                  type: string
                  format: date
                time:
                  type: string
                  pattern: ^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$
                notes:
                  type: string
                  maxLength: 500
      responses:
        '201':
          description: Booking created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Booking created successfully
                  data:
                    $ref: '#/components/schemas/Booking'

  /bookings/{id}:
    get:
      summary: Get a single booking
      tags: [Bookings]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Booking details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Booking'

    put:
      summary: Update a booking
      tags: [Bookings]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                serviceProviderId:
                  type: string
                serviceId:
                  type: string
                date:
                  type: string
                  format: date
                time:
                  type: string
                  pattern: ^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$
                notes:
                  type: string
                  maxLength: 500
      responses:
        '200':
          description: Booking updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Booking updated successfully
                  data:
                    $ref: '#/components/schemas/Booking'

    delete:
      summary: Delete a booking
      tags: [Bookings]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Booking deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Booking deleted successfully

  /bookings/{id}/status:
    patch:
      summary: Update booking status
      tags: [Bookings]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [status]
              properties:
                status:
                  type: string
                  enum: [pending, confirmed, completed, cancelled]
      responses:
        '200':
          description: Booking status updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Booking status updated successfully
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                      status:
                        type: string
                      updatedAt:
                        type: string
                        format: date-time

  /notifications:
    get:
      summary: Get all notifications
      tags: [Notifications]
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 10
        - name: read
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: List of notifications
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      notifications:
                        type: array
                        items:
                          $ref: '#/components/schemas/Notification'
                      pagination:
                        type: object
                        properties:
                          total:
                            type: integer
                            example: 25
                          pages:
                            type: integer
                            example: 3
                          currentPage:
                            type: integer
                            example: 1
                          limit:
                            type: integer
                            example: 10

    post:
      summary: Create a new notification
      tags: [Notifications]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [title, description, type]
              properties:
                title:
                  type: string
                  minLength: 2
                  maxLength: 100
                description:
                  type: string
                  minLength: 2
                  maxLength: 500
                type:
                  type: string
                  enum: [booking, message, system]
      responses:
        '201':
          description: Notification created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Notification created successfully
                  data:
                    $ref: '#/components/schemas/Notification'

  /notifications/{id}:
    get:
      summary: Get a single notification
      tags: [Notifications]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Notification details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Notification'

    put:
      summary: Update a notification
      tags: [Notifications]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  minLength: 2
                  maxLength: 100
                description:
                  type: string
                  minLength: 2
                  maxLength: 500
                type:
                  type: string
                  enum: [booking, message, system]
      responses:
        '200':
          description: Notification updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Notification updated successfully
                  data:
                    $ref: '#/components/schemas/Notification'

    delete:
      summary: Delete a notification
      tags: [Notifications]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Notification deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Notification deleted successfully

  /notifications/{id}/read:
    patch:
      summary: Mark a notification as read
      tags: [Notifications]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Notification marked as read
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Notification marked as read
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                      read:
                        type: boolean
                        example: true
                      readAt:
                        type: string
                        format: date-time

  /notifications/read-all:
    patch:
      summary: Mark all notifications as read
      tags: [Notifications]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: All notifications marked as read
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: All notifications marked as read 