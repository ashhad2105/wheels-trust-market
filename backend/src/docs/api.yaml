openapi: 3.0.0
info:
  title: WheelsTrust API
  description: API documentation for WheelsTrust platform
  version: 1.0.0
  contact:
    email: support@wheelstrust.com

servers:
  - url: http://localhost:5000/api/v1
    description: Development server
  - url: https://api.wheelstrust.com/api/v1
    description: Production server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
          example: Error message

    User:
      type: object
      properties:
        name:
          type: string
          example: John Doe
        email:
          type: string
          format: email
          example: john@example.com
        password:
          type: string
          format: password
          example: "123456"
        role:
          type: string
          enum: [user, service_provider, admin]
          example: user
        status:
          type: string
          enum: [active, pending, inactive]
          example: active

    Service:
      type: object
      properties:
        name:
          type: string
          example: Oil Change
        description:
          type: string
          example: Complete oil change service
        price:
          type: number
          example: 49.99
        duration:
          type: number
          example: 60
        category:
          type: string
          enum: [maintenance, repair, cleaning, inspection, other]
          example: maintenance
        status:
          type: string
          enum: [active, inactive]
          example: active

paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        201:
          description: User registered successfully
        400:
          description: Invalid input

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        200:
          description: Login successful
        401:
          description: Invalid credentials

  /services:
    get:
      tags:
        - Services
      summary: Get all services
      responses:
        200:
          description: List of services retrieved successfully
    post:
      tags:
        - Services
      summary: Create a new service
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
      responses:
        201:
          description: Service created successfully
        401:
          description: Not authorized

  /services/{id}:
    get:
      tags:
        - Services
      summary: Get single service
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Service retrieved successfully
        404:
          description: Service not found
    put:
      tags:
        - Services
      summary: Update service
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
      responses:
        200:
          description: Service updated successfully
        404:
          description: Service not found
    delete:
      tags:
        - Services
      summary: Delete service
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Service deleted successfully
        404:
          description: Service not found 